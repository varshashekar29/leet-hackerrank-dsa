Important questions of Python:

üìå What is Python?
* High-level, interpreted, general-purpose programming language
* Emphasizes readability and conciseness (uses indentation instead of braces)
* Created by Guido van Rossum and first released in 1991

üìå Why Python?
Simple
    Clean, English-like syntax
    Minimal boilerplate ‚Üí focus on solving problems

Powerful
    Batteries-included standard library (web, file I/O, data handling, etc.)
    Vast ecosystem of third-party packages (NumPy, Pandas, Flask, Django, ‚Ä¶)

Flexible
    Multi-paradigm: procedural, object-oriented, functional
    Runs on all major platforms (Windows, macOS, Linux)
    Easy to embed in other apps or extend with C/C++

üìå How Python Runs Code?
        I have a source code which I save with a .py extension. When I run the code, Python first compiles the source code into bytecode. This bytecode is then sent to the interpreter, where the Python Virtual Machine (PVM) reads and executes the bytecode line by line. After interpretation, the PVM directly executes the instructions and gives the output (it does not convert it back into high-level language). Therefore, in Python, compilation to bytecode and interpretation happen automatically, and we directly get the result.

üîç Even though Python compiles code, Python is still called an interpreted language?
    ‚úî Python does compile your .py code into bytecode (.pyc) ‚Üí this happens automatically behind the scenes.
    ‚úî But the bytecode is not the final output.
    It‚Äôs just an intermediate step.
    ‚úî The real work ‚Äî reading the bytecode and running it line by line ‚Äî is done by the interpreter (PVM).
    üéØEven if compilation happens, what matters is how the program runs.
      If it runs through an interpreter, the language is considered interpreted.

---------------------------------------------------------------------------------------------------------------------------

1) Variable:- A variable is a named memory location which is used to store the values and the values can be changed n number of times during execution.

2) What is a Datatype?
    Datatype means the type of data a variable holds.

3) Dynamic typing:- Dynamic typing means the type of a variable is determined at runtime (while the program is running), not when you write the code.

4)Why indentation matters in Python?
    "Python forces indentation to make code visually organized and logically correct."

5) Difference between Variables in Python vs C/Java
    Point	        C/Java	                                    Python
Typing	            Static typing (fixed type)  	    Dynamic typing (type changes)
Type Declaration	Must declare (int a = 5;)	        No need to declare (a = 5)
Type Change	        Not allowed (int cannot be string)	Allowed anytime
Compilation	        Compiler checks errors early	    Runtime checks
Memory Handling	    Variables hold memory address	    Variables reference objects

6)Difference between == vs is
    == (Equality Operator):
    What it does: Checks if two things are the same in value.
    Example:
        If you have two lists: [1, 2, 3] and [1, 2, 3], == checks if the values inside the lists are the same.
        Result: True because the values are equal, even though they are different objects in memory.

    is (Identity Operator):
    What it does: Checks if two things are the exact same object in memory (if they are stored in the same place).
    Example:
    If you have two lists: [1, 2, 3] and [1, 2, 3], is checks if both lists are the same object.
    Result: False because even though they have the same value, they are stored in different places in memory.

    üéØ== checks if values are equal (even if they are different objects) They can have different memory also.
    is checks if they are the exact same object in memory if the memory is different they won't work.


7)What is floor division?
    It divides two numbers and rounds down the result to the nearest integer.

8)When to use in and not in with strings?
    in (checks if a substring exists):
    What it does: Checks if a particular substring exists inside a string.
    Return value: Returns True if the substring is found, otherwise returns False.

    not in (checks if a substring does not exist):
    What it does: Checks if a particular substring is not present in a string.
    Return value: Returns True if the substring is not found, otherwise returns False.


9)Why strings are immutable?

    Strings are immutable in Python because once a string is created, you cannot change it. If you try to change a string, Python will create a new string instead of modifying the original one.

    Why is this a good thing?
        Memory Efficiency: Python can reuse the same string in different places without needing extra memory.

        Performance: Since strings don‚Äôt change, it helps Python work faster and more efficiently, especially when searching for strings.

        Safety: Immutability prevents accidental changes to strings, making your code safer and more predictable.


10)Difference between if-elif-else and if-else statements.
    if-else Statement:
        Used when you have only two choices ‚Äî one condition to check, and one fallback.
        If the if condition is True, it runs that block; otherwise, it runs the else block.

    if-elif-else Statement:
        Used when you have more than two conditions to check.
        It checks conditions one by one from top to bottom.
        As soon as one condition is True, it runs that block and skips the rest.

11)How to use nested if conditions properly?
    A nested if is an if statement inside another if block. It allows you to check more specific conditions only if the outer condition is true.

12)Priority of conditions when checking multiple conditions.
    1)In if-elif-else chains:
        Python checks top to bottom. The first condition that is True is executed, and the rest are skipped.
    2)Inside a single condition, operator precedence matters:
        not ‚Üí highest priority
        and ‚Üí medium priority
        or ‚Üí lowest priority
    Use parentheses () to make conditions clearer.

13)Short-circuiting (logical operators' behavior).
    Short-Circuiting Summary:
üîπ Short-circuiting happens when Python stops checking further conditions because the result is already known from the first condition.

üî∏ and Operator:
Stops if first condition is False.
Because False and anything is always False.
üî∏ or Operator:
Stops if first condition is True.
Because True or anything is always True.

